{
  "name": "api-poo",
  "version": "1.0.0",
  "description": "Aprendiendo typescript",
  "main": "server.ts",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    
 
    "//":"como start es una palabra nativa de node, no necesitanmos ponerle el run. 1º: tsc, transpila ts a js y envía a ./dist, && (y luego:) exe desde dist este archivo server.js",
    "//":"se exe con npm start, porque es un scrip por defecto de node",
    "start":"tsc && node dist/server.js", 

    "//":"como start-dev NO es una palabra nativa de node, SI necesitanmos ponerle el run. \" escape",
    "//":"tss && concurrently: exe n comandos al mismo tiempo, to2 los que siguen  \"tsc -w: watches ve nuevos cambios y transpila en tiempo real automatikmente y por cada save transpila ByDefault \" \"nodemon dist/server.js\" ",
    "//":"se exe con npm run start:dev, porque NO es un scrip por defecto de node, es mio y fuerzo su exe con run",
    "start:dev":"tsc && concurrently \"tsc -w\" \"nodemon dist/server.js\"",
    
    "//":"Este escript es para producción, seteo este envaironment a la variable y llamo a start. nombre de var será igual a parte de file <productión>",
    "//":"se exe con npm run start:prod, porque NO es un scrip por defecto de node, es mio y fuerzo su exe con run",
    "start:prod":"NODE_ENV=production npm start",
    "//":"otra solucuin, export NODE_ENV=production && npm start"


  },
  "author": "ante",
  "license": "ISC",
  "dependencies": {
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.18.2",
    "morgan": "^1.10.0",
    "mysql": "^2.18.1",
    "typeorm": "^0.3.20",
    "typeorm-naming-strategies": "^4.1.0",
    "typescript": "^5.3.3"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/morgan": "^1.9.9",
    "concurrently": "^8.2.2",
    "nodemon": "^3.1.0"
  }
}
